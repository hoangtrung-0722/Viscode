[{"D:\\WebLearning\\Viscode\\client\\src\\index.js":"1","D:\\WebLearning\\Viscode\\client\\src\\reportWebVitals.js":"2","D:\\WebLearning\\Viscode\\client\\src\\App.js":"3","D:\\WebLearning\\Viscode\\client\\src\\components\\OpenModal.js":"4","D:\\WebLearning\\Viscode\\client\\src\\components\\SaveModal.js":"5","D:\\WebLearning\\Viscode\\client\\src\\container\\WorkSpace.js":"6","D:\\WebLearning\\Viscode\\client\\src\\config\\constant.js":"7","D:\\WebLearning\\Viscode\\client\\src\\components\\BlocklyComponent.js":"8","D:\\WebLearning\\Viscode\\client\\src\\components\\Terminal.js":"9","D:\\WebLearning\\Viscode\\client\\src\\components\\ExportArea.js":"10","D:\\WebLearning\\Viscode\\client\\src\\components\\worker.js":"11","D:\\WebLearning\\Viscode\\client\\src\\components\\SignInModal.js":"12","D:\\WebLearning\\Viscode\\client\\src\\services\\auth.services.js":"13","D:\\WebLearning\\Viscode\\client\\src\\components\\RegisterModal.js":"14"},{"size":523,"mtime":1613995334594,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1611665940264,"results":"17","hashOfConfig":"16"},{"size":3766,"mtime":1616168223816,"results":"18","hashOfConfig":"16"},{"size":4797,"mtime":1615560626383,"results":"19","hashOfConfig":"16"},{"size":5350,"mtime":1615560619684,"results":"20","hashOfConfig":"16"},{"size":5008,"mtime":1615262107217,"results":"21","hashOfConfig":"16"},{"size":54,"mtime":1613995334594,"results":"22","hashOfConfig":"16"},{"size":2416,"mtime":1615262107216,"results":"23","hashOfConfig":"16"},{"size":3798,"mtime":1613448194534,"results":"24","hashOfConfig":"16"},{"size":1708,"mtime":1613448194534,"results":"25","hashOfConfig":"16"},{"size":997,"mtime":1613448194535,"results":"26","hashOfConfig":"16"},{"size":2911,"mtime":1616160967886,"results":"27","hashOfConfig":"16"},{"size":803,"mtime":1616168186013,"results":"28","hashOfConfig":"16"},{"size":3383,"mtime":1616158311601,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1mfmjts",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},"D:\\WebLearning\\Viscode\\client\\src\\index.js",[],["65","66"],"D:\\WebLearning\\Viscode\\client\\src\\reportWebVitals.js",[],"D:\\WebLearning\\Viscode\\client\\src\\App.js",["67"],"D:\\WebLearning\\Viscode\\client\\src\\components\\OpenModal.js",[],"D:\\WebLearning\\Viscode\\client\\src\\components\\SaveModal.js",[],"D:\\WebLearning\\Viscode\\client\\src\\container\\WorkSpace.js",["68"],"import React from \"react\";\r\nimport Terminal from \"../components/Terminal\";\r\nimport { Layout, message, Tabs } from \"antd\";\r\nimport BlocklyComponent, { Block, Category } from \"../components/BlocklyComponent\";\r\nimport \"blockly/javascript\";\r\nimport \"./workspace.css\";\r\nimport ExportArea from \"../components/ExportArea\";\r\nimport axios from \"axios\";\r\nimport { API_HOST } from \"../config/constant\";\r\nimport { useParams } from \"react-router-dom\";\r\nconst { Content, Footer } = Layout;\r\n\r\nconst DEFAULT_TITLE = \"Untitled Workspace\";\r\n\r\nconst DEFAULT_WORKSPACE = {\r\n  title: DEFAULT_TITLE,\r\n  key: \"1\",\r\n  xml: \"<xml xmlns='http://www.w3.org/1999/xhtml'></xml>\",\r\n};\r\n\r\nfunction WorkSpace({ updateXml }) {\r\n  const [xml, setXml] = React.useState(DEFAULT_WORKSPACE.xml);\r\n  const [code, setCode] = React.useState(\"\");\r\n  const { id } = useParams();\r\n  const onWorkSpaceChange = (code) => {\r\n    setCode(code);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (id)\r\n      axios\r\n        .get(`${API_HOST}/my-files/files/${id}`)\r\n        .then(({ data }) => setXml(data.data))\r\n        .catch((err) => message.error(err));\r\n  }, [id]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          height: \"100%\",\r\n          width: \"75%\",\r\n          resize: \"horizontal\",\r\n          overflow: \"auto\",\r\n          borderRight: \"1px solid #c6c6c6\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <BlocklyComponent\r\n          readOnly={false}\r\n          move={{\r\n            scrollbars: true,\r\n            drag: true,\r\n            wheel: true,\r\n          }}\r\n          initialXml={xml}\r\n          onWorkSpaceChange={onWorkSpaceChange}\r\n          updateXml={updateXml}\r\n        >\r\n          <Category name=\"Variables\" categorystyle=\"variable_category\">\r\n            <Block type=\"variables_get\"></Block>\r\n            <Block type=\"variables_set\"></Block>\r\n          </Category>\r\n          <Category name=\"Procedures\" categorystyle=\"procedure_category\">\r\n            <Block type=\"procedures_defnoreturn\"></Block>\r\n            <Block type=\"procedures_defreturn\"></Block>\r\n            <Block type=\"procedures_mutatorcontainer\"></Block>\r\n            <Block type=\"procedures_mutatorarg\"></Block>\r\n            <Block type=\"procedures_callnoreturn\"></Block>\r\n            <Block type=\"procedures_callreturn\"></Block>\r\n          </Category>\r\n          <Category name=\"Text\" categorystyle=\"text_category\">\r\n            <Block type=\"text_print\"></Block>\r\n            <Block type=\"text_prompt\"></Block>\r\n            <Block type=\"text\"></Block>\r\n            <Block type=\"text_length\"></Block>\r\n            <Block type=\"text_multiline\"></Block>\r\n            <Block type=\"text_join\"></Block>\r\n            <Block type=\"text_append\"></Block>\r\n          </Category>\r\n          <Category name=\"Loop\" categorystyle=\"loop_category\">\r\n            <Block type=\"controls_whileUntil\" blockstyle=\"list_blocks\"></Block>\r\n            <Block type=\"controls_repeat\"></Block>\r\n            <Block type=\"controls_for\"></Block>\r\n          </Category>\r\n          <Category name=\"Logic\" categorystyle=\"logic_category\">\r\n            <Block type=\"controls_if\"></Block>\r\n            <Block type=\"logic_compare\"></Block>\r\n            <Block type=\"logic_operation\"></Block>\r\n            <Block type=\"logic_boolean\"></Block>\r\n          </Category>\r\n          <Category name=\"Math\" categorystyle=\"math_category\">\r\n            <Block type=\"math_number\"></Block>\r\n            <Block type=\"math_arithmetic\"></Block>\r\n            <Block type=\"math_modulo\"></Block>\r\n            <Block type=\"math_single\"></Block>\r\n            <Block type=\"math_trig\"></Block>\r\n            <Block type=\"math_constant\"></Block>\r\n            <Block type=\"math_number_property\"></Block>\r\n          </Category>\r\n          <Category name=\"List\" categorystyle=\"list_category\">\r\n            <Block type=\"lists_getIndex\"></Block>\r\n            <Block type=\"lists_create_empty\"></Block>\r\n            <Block type=\"lists_create_with\"></Block>\r\n            <Block type=\"lists_repeat\"></Block>\r\n            <Block type=\"lists_length\"></Block>\r\n            <Block type=\"lists_isEmpty\"></Block>\r\n          </Category>\r\n        </BlocklyComponent>\r\n      </div>\r\n      <Layout style={{ height: \"100%\", width: \"25%\" }}>\r\n        <Content style={{ height: \"35%\" }}>\r\n          <Terminal code={code} />\r\n        </Content>\r\n        <Content style={{ backgroundColor: \"white\", height: \"60%\", border: \"none\" }}>\r\n          <ExportArea code={code} />\r\n        </Content>\r\n        <Footer\r\n          style={{\r\n            height: \"5%\",\r\n            padding: \"5px 10px\",\r\n            borderTop: \"1px solid #cacaca\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          Võ Minh Triều - Nguyễn Hoàng Trung - 2020\r\n        </Footer>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkSpace;\r\nexport { DEFAULT_TITLE, DEFAULT_WORKSPACE };\r\n","D:\\WebLearning\\Viscode\\client\\src\\config\\constant.js",[],"D:\\WebLearning\\Viscode\\client\\src\\components\\BlocklyComponent.js",["69"],"import React from \"react\";\r\nimport \"./blocklyComponent.css\";\r\nimport Blockly from \"blockly/core\";\r\nimport \"blockly/blocks\";\r\nimport BlocklyJavaScript from \"blockly/javascript\";\r\nimport locale from \"blockly/msg/en\";\r\nimport { io } from \"socket.io-client\";\r\nimport { message } from \"antd\";\r\nBlockly.setLocale(locale);\r\nconst socket = io(\"http://localhost:5000\");\r\n\r\nfunction BlocklyComponent(props) {\r\n  const [workspace, setWorkspace] = React.useState(null);\r\n  const toolbox = React.useRef(null);\r\n  const editor = React.useRef(null);\r\n  const { initialXml, children, updateXml, onWorkSpaceChange, ...rest } = props;\r\n\r\n  React.useEffect(() => {\r\n    const tempWorkSpace = Blockly.inject(editor.current, {\r\n      toolbox: toolbox.current,\r\n      ...rest,\r\n    });\r\n\r\n    const onChange = (event) => {\r\n      if (event.type !== \"finished_loading\" && !event.isUiEvent) {\r\n        const code = BlocklyJavaScript.workspaceToCode(tempWorkSpace);\r\n        onWorkSpaceChange(code);\r\n        updateXml(Blockly.Xml.workspaceToDom(tempWorkSpace));\r\n        socket.emit(\"eventTriggered\", event.toJson());\r\n      }\r\n    };\r\n\r\n    socket.on(\"eventMirrored\", (jsonEvent) => {\r\n      Blockly.Events.disable();\r\n      Blockly.Events.fromJson(jsonEvent, tempWorkSpace).run(true);\r\n      Blockly.Events.enable();\r\n      const code = BlocklyJavaScript.workspaceToCode(tempWorkSpace);\r\n      onWorkSpaceChange(code);\r\n      updateXml(Blockly.Xml.workspaceToDom(tempWorkSpace));\r\n    });\r\n\r\n    if (initialXml) {\r\n      Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(initialXml), tempWorkSpace);\r\n    }\r\n\r\n    tempWorkSpace.addChangeListener(onChange);\r\n    setWorkspace(tempWorkSpace);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (workspace) {\r\n      Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.Xml.textToDom(initialXml), workspace);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [initialXml]);\r\n\r\n  return (\r\n    <>\r\n      <xml id=\"toolbox\" is=\"blockly\" style={{ display: \"none\" }} ref={toolbox}>\r\n        {children}\r\n      </xml>\r\n      <div ref={editor} id=\"editor\"></div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Block = ({ children, ...props }) => React.createElement(\"block\", { ...props, is: \"blockly\" }, children);\r\nconst Category = ({ children, ...props }) => React.createElement(\"category\", { ...props, is: \"blockly\" }, children);\r\n\r\nexport { Block, Category };\r\nexport default BlocklyComponent;\r\n","D:\\WebLearning\\Viscode\\client\\src\\components\\Terminal.js",["70"],"import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { CaretRightOutlined, StopOutlined } from \"@ant-design/icons\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport getWorkerCode from \"./worker\";\r\nimport \"./terminal.css\";\r\n\r\nconst getWebWorker = (code) => {\r\n  const blob = new Blob([getWorkerCode(code)]);\r\n  return new Worker(URL.createObjectURL(blob));\r\n};\r\n\r\nfunction Terminal({ code }) {\r\n  const container = React.useRef(null);\r\n  const output = React.useRef(null);\r\n  const [worker, setWorker] = React.useState(null);\r\n  const [running, setRunning] = React.useState(false);\r\n  const caret = React.useRef(null);\r\n\r\n  React.useState(() => {\r\n    if (caret.current) {\r\n      caret.current.value = \"\";\r\n    }\r\n  }, [running]);\r\n\r\n  const runCode = () => {\r\n    if (worker) worker.terminate();\r\n    output.current.innerHTML = \"\";\r\n    caret.current.value = \"\";\r\n    setRunning(true);\r\n    const temp = getWebWorker(code);\r\n    temp.addEventListener(\"message\", (e) => {\r\n      if (e.data.status !== \"done\") {\r\n        if (e.data.waitForInput) {\r\n          output.current.innerHTML += e.data.text.replaceAll(\"\\\\n\", \"<br/>\");\r\n          caret.current.focus();\r\n        } else {\r\n          output.current.innerHTML += e.data.text.replaceAll(\"\\\\n\", \"<br/>\");\r\n        }\r\n      } else {\r\n        temp.terminate();\r\n        setWorker(null);\r\n        setRunning(false);\r\n        output.current.innerHTML += '<br/><span style=\"color: lime\">Program exited with no error</span>';\r\n      }\r\n    });\r\n    setWorker(temp);\r\n  };\r\n\r\n  const stopRunning = () => {\r\n    worker.terminate();\r\n    setRunning(false);\r\n    output.current.innerHTML += '<br/><span style=\"color: red\">Program stopped by user!</span>';\r\n  };\r\n\r\n  const sendInput = (e) => {\r\n    if (e.key === \"Enter\" && worker) {\r\n      output.current.innerHTML += e.target.value + \"<br/>\";\r\n      worker.postMessage(e.target.value);\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={container}\r\n      style={{\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        background: \"black\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          backgroundColor: \"white\",\r\n          padding: \"5px\",\r\n          borderBottom: \"1px solid #cecece\",\r\n        }}\r\n      >\r\n        <h3 style={{ marginBottom: 0 }}>Terminal</h3>\r\n        {running ? (\r\n          <Button\r\n            onClick={stopRunning}\r\n            type=\"primary\"\r\n            danger\r\n            icon={<StopOutlined />}\r\n            title=\"Stop running\"\r\n            style={{ marginLeft: \"auto\" }}\r\n          >\r\n            Stop\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            type=\"primary\"\r\n            icon={<CaretRightOutlined />}\r\n            title=\"Run code in terminal\"\r\n            onClick={runCode}\r\n            style={{ marginLeft: \"auto\" }}\r\n          >\r\n            Run\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        style={{ backgroundColor: \"black\", padding: 10, height: \"100%\", overflow: \"auto\" }}\r\n        onClick={() => caret.current.focus()}\r\n      >\r\n        <pre style={{ color: \"rgba(255,255,255,0.9)\" }}>\r\n          Viscode Terminal (c) - All Rights Reserved\r\n          <br />\r\n          <span ref={output}></span>\r\n          <input\r\n            ref={caret}\r\n            onKeyDown={sendInput}\r\n            style={{\r\n              display: \"inline\",\r\n              whiteSpace: \"pre-wrap\",\r\n              border: \"none\",\r\n              lineHeight: 1,\r\n              padding: 0,\r\n              background: \"none\",\r\n              outline: \"none\",\r\n            }}\r\n            type=\"text\"\r\n          />\r\n        </pre>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Terminal;\r\n","D:\\WebLearning\\Viscode\\client\\src\\components\\ExportArea.js",[],"D:\\WebLearning\\Viscode\\client\\src\\components\\worker.js",[],"D:\\WebLearning\\Viscode\\client\\src\\components\\SignInModal.js",["71","72"],"import React from \"react\";\r\nimport { Modal, message, Button, Input, Form, Checkbox } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nimport AuthService from \"../services/auth.services\";\r\nimport RegisterModal from \"./RegisterModal\";\r\n\r\nexport default function SignInModal(props) {\r\n  const [registerModalVisible, setRegisterModalVisible] = React.useState(false);\r\n\r\n  const onFinish = (values) => {\r\n    AuthService.login(values.username, values.password).then(\r\n      () => {\r\n        window.location.reload();\r\n      },\r\n      (error) => {\r\n        message.error(\"Log in failed. Wrong username or password\");\r\n      }\r\n    );\r\n  };\r\n\r\n  const onRegisterClick = () => {\r\n    setRegisterModalVisible(true);\r\n    props.onClose();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <RegisterModal\r\n        visible={registerModalVisible}\r\n        onClose={() => setRegisterModalVisible(false)}\r\n      />\r\n      <Modal\r\n        title=\"Sign In\"\r\n        visible={props.visible}\r\n        onCancel={props.onClose}\r\n        footer={null}\r\n      >\r\n        <Form onFinish={onFinish} on>\r\n          <Form.Item name=\"username\">\r\n            <Input\r\n              prefix={<UserOutlined />}\r\n              placeholder=\"Username\"\r\n              style={{ fontSize: \"20px\" }}\r\n              type=\"text\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"password\">\r\n            <Input\r\n              prefix={<LockOutlined />}\r\n              placeholder=\"Password\"\r\n              style={{ fontSize: \"20px\" }}\r\n              type=\"password\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n          >\r\n            <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n              <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <a className=\"login-form-forgot\" href=\"\" style={{ float: \"right\" }}>\r\n              Forgot password\r\n            </a>\r\n          </Form.Item>\r\n          <Form.Item wrapperCol={{ offset: 8, span: 8 }}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              size=\"large\"\r\n              shape=\"round\"\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </Form.Item>\r\n          <Form.Item style={{ textAlign: \"center\", display: \"flex\" }}>\r\n            Or\r\n            <Button\r\n              type=\"text\"\r\n              onClick={onRegisterClick}\r\n              style={{\r\n                border: \"none\",\r\n                cursor: \"pointer\",\r\n                color: \"#0275d8\",\r\n                textDecoration: \"underline\",\r\n                paddingLeft: \"1em\",\r\n              }}\r\n            >\r\n              register now!\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","D:\\WebLearning\\Viscode\\client\\src\\services\\auth.services.js",["73"],"import axios from \"axios\";\r\nimport { API_HOST } from \"../config/constant\";\r\n\r\nconst register = (username, password) => {\r\n  return axios.post(`${API_HOST}/user/signup`, {\r\n    username,\r\n    password\r\n  });\r\n};\r\n\r\nconst login = (username, password) => {\r\n  return axios\r\n    .post(`${API_HOST}/user/signin`, {\r\n      username,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n  window.location.reload();\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nexport default {\r\n  register,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n};","D:\\WebLearning\\Viscode\\client\\src\\components\\RegisterModal.js",["74","75"],"import React from \"react\";\r\nimport { Modal, message, Button, Input, Form, Checkbox } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nimport AuthService from \"../services/auth.services\";\r\n\r\nexport default function RegisterModal(props) {\r\n\r\n  const onFinish = (values) => {\r\n    AuthService.register(values.username, values.password).then(\r\n      () => {\r\n        window.location.reload();\r\n      },\r\n      (error) => {\r\n        message.error(\"Register in failed. Check your info and try again\");\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title=\"Register new account\"\r\n        visible={props.visible}\r\n        onCancel={props.onClose}\r\n        footer={null}\r\n      >\r\n        <Form onFinish={onFinish} on>\r\n          <Form.Item name=\"username\" rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your username!\"\r\n            }\r\n          ]}>\r\n            <Input\r\n              prefix={<UserOutlined />}\r\n              placeholder=\"Username\"\r\n              style={{ fontSize: \"20px\" }}\r\n              type=\"text\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"password\" rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your password!\"\r\n            }\r\n          ]}>\r\n            <Input\r\n              prefix={<LockOutlined />}\r\n              placeholder=\"Password\"\r\n              style={{ fontSize: \"20px\" }}\r\n              type=\"password\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"confirmPassword\"\r\n            dependencies={[\"password\"]}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please confirm your password!\",\r\n              },\r\n              ({ getFieldValue }) => ({\r\n                validator(_, value) {\r\n                  if (!value || getFieldValue(\"password\") === value) {\r\n                    return Promise.resolve();\r\n                  }\r\n\r\n                  return Promise.reject(\r\n                    new Error(\r\n                      \"The two passwords that you entered do not match!\"\r\n                    )\r\n                  );\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined />}\r\n              placeholder=\"Confirm Password\"\r\n              style={{ fontSize: \"20px\" }}\r\n              type=\"password\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item wrapperCol={{ offset: 8, span: 8 }}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              size=\"large\"\r\n              shape=\"round\"\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              Create account\r\n            </Button>\r\n          </Form.Item>\r\n          <Form.Item style={{ textAlign: \"center\", display: \"flex\" }}>\r\n            Already have an account?\r\n            <Button\r\n              type=\"text\"\r\n              style={{\r\n                border: \"none\",\r\n                cursor: \"pointer\",\r\n                color: \"#0275d8\",\r\n                textDecoration: \"underline\",\r\n                paddingLeft: \"1em\",\r\n              }}\r\n            >\r\n              Log in here\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":35,"column":9,"nodeType":"82","messageId":"83","endLine":35,"endColumn":17},{"ruleId":"80","severity":1,"message":"84","line":3,"column":27,"nodeType":"82","messageId":"83","endLine":3,"endColumn":31},{"ruleId":"80","severity":1,"message":"85","line":8,"column":10,"nodeType":"82","messageId":"83","endLine":8,"endColumn":17},{"ruleId":"80","severity":1,"message":"86","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":22},{"ruleId":"80","severity":1,"message":"87","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":64,"column":13,"nodeType":"90","endLine":64,"endColumn":81},{"ruleId":"91","severity":1,"message":"92","line":35,"column":1,"nodeType":"93","endLine":40,"endColumn":3},{"ruleId":"80","severity":1,"message":"94","line":2,"column":47,"nodeType":"82","messageId":"83","endLine":2,"endColumn":55},{"ruleId":"80","severity":1,"message":"87","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'userMenu' is assigned a value but never used.","Identifier","unusedVar","'Tabs' is defined but never used.","'message' is defined but never used.","'ScrollToBottom' is defined but never used.","'axios' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Checkbox' is defined but never used.","no-global-assign","no-unsafe-negation"]